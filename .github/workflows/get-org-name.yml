#This GitHub Action, “Search Org Name”, is designed to search for the string ‘github-gk-aks’ across multiple repositories listed in a file. It clones each repository, performs the search, logs the results to a text file, and uploads the artifacts. The action is manually triggered.
name: Search Org Name

on:
  workflow_dispatch:

jobs:
  find-strings:
    runs-on: fixed-ip-runner-4core-22.04

    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_MIGRATION_PAT }}
          path: ./source-repo

      - name: Check if output directory exists
        run: |
          if [ ! -d "${{ github.workspace }}/source-repo/output" ]; then
            echo "Output directory does not exist. Creating..."
            mkdir -p "${{ github.workspace }}/source-repo/output"
          else
            echo "Output directory already exists."
          fi
  
      - name: Import GPG key
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
          rm -rf /tmp/gpg.sh
          echo '#!/bin/bash' >> /tmp/gpg.sh
          echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
          chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
          git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
          git config --global gpg.program /tmp/gpg.sh
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
  

      - name: Iterate Over Repos
        run: |
          mapfile -t repositories < "${{ github.workspace }}/source-repo/repositories.txt"
          for repo in "${repositories[@]}"; do
            IFS='/' read -r org_name repo_name <<< "$repo"
            echo "Processing repository: $org_name/$repo_name"
            git clone -b github-migration "https://${{ secrets.GH_MIGRATION_PAT }}@github.com/$repo.git" "./target-repo"

            echo "Searching for the string 'Legal-General-Group-Digital' in the entire repository, excluding certain file extensions..."

            #find ./target-repo -type f ! -iname "*.jpg" ! -iname "*.jpeg" ! -iname "*.xlsx" ! -iname "*.pdf" ! -iname "*.woff" ! -iname "*.woff2" ! -iname "*.png" ! -iname "*.gif" ! -iname "*.ico" ! -path "./target-repo/.git/*" -print0 | while IFS= read -r -d '' file; do
            find ./target-repo -type d \( -path "./target-repo/input_migration" -o -path "./target-repo/script_migration" \) -prune -o \
            -type f ! -iname "*.jpg" ! -iname "*.jpeg" ! -iname "*.xlsx" ! -iname "*.pdf" ! -iname "*.woff" ! -iname "*.woff2" ! -iname "*.png" ! -iname "*.gif" ! -iname "*.ico" ! -path "./target-repo/.git/*" \
            ! -path "./target-repo/.github/workflows/replace-string-org-only.yml" \
            ! -path "./target-repo/.github/workflows/replace-string-org-repo.yml" \
            ! -path "./target-repo/.github/workflows/replace-string-team-only.yml" \
            ! -path "./target-repo/.github/workflows/replace-string-team-url.yml" \
            -print0 | while IFS= read -r -d '' file; do
            if [[ -s "$file" ]]; then
              if [[ $(file -i "$file") != *charset=binary* ]]; then
              #if [[ $(file -b --mime-type "$file") == text/* ]] || [[ $(file -b --mime-type "$file") == application/json ]]; then
                  if grep -qEi 'Legal-General-Group-Digital' "$file"; then
                    echo "Processing file: $file"
                    echo "Repo:$repo, File:$file, Matched String:Legal-General-Group-Digital" >> "${{ github.workspace }}/source-repo/output/result-check-Legal-General-Group-Digital.txt"
                  else
                    echo "Repo:$repo, File:$file, No match found" >> "${{ github.workspace }}/source-repo/output/result-check-Legal-General-Group-Digital.txt"
                  fi
              else
                echo "Repo:$repo, File:$file, Not a text file" >> "${{ github.workspace }}/source-repo/output/result-check-Legal-General-Group-Digital.txt"
              fi
            else
              echo "Repo:$repo, File:$file, File is empty" >> "${{ github.workspace }}/source-repo/output/result-check-Legal-General-Group-Digital.txt"
            fi
            done

            rm -rf "./target-repo"
          done

      - name: Upload Digital Org String Report
        uses: actions/upload-artifact@v4
        with:
          name: digital-org-report
          path: ./source-repo/output
          
      # - name: Commit Changes
      #   run: |
      #     cd ${{ github.workspace }}/source-repo/output
      #     if [ -n "$(git status --porcelain)" ]; then
      #       git pull origin main
      #       git add result-check-Legal-General-Group-Digital.txt
      #       git commit -S -m "Add result-check-Legal-General-Group-Digital.txt - $(date +"%Y-%m-%d %H:%M:%S")"
      #       git push origin main
      #     else
      #       echo "There are no changes to commit."
      #     fi
      #   working-directory: ${{ github.workspace }}
      #   env:
      #     GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
